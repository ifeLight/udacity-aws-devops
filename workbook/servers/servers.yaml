Description: The servers for the workbook created

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names also called project name
    Type: String

Resources:
  # An HttpSecurityGroup that allows HTTP access from anywhere
  HttpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-HttpSecurityGroup"

  # An SSHSecurityGroup that allows SSH access from anywhere
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-SSHSecurityGroup"

  # WebServerSecurityGroup that allows HTTP and SSH access from anywhere
  # And allows abound traffic to port 65535
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebServerSecGroup"

  # A LoadBalancerSecurityGroup that allows HTTP and SSH access from anywhere
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-LoadBalancerSecurityGroup"

  # Instance Key Pair
  InstanceKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances

  # A LaunchConfiguration that creates an EC2 instance with Ubuntu 22.04
  # UserData script that installs Apache and starts the service
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          echo "My Web Server Up and Running!" > index.html
      ImageId: ami-0530ca8899fac469f # Ubuntu 22.04 LTS
      KeyName: !Ref InstanceKeyPair
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebAppLaunchConfig"

  # Web App Target Group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${EnvironmentName}-WebAppTargetGroup"
      Port: 8080
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance

  # An AutoScalingGroup that creates 1 EC2 instances and scales up to 4
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: "1"
      MaxSize: "4"
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnets"
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebAppAutoScalingGroup"
          PropagateAtLaunch: true

  # A LoadBalancer that listens on port 80 and forwards to port 8080 on the EC2 instances
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvironmentName}-WebAppLoadBalancer"
      Scheme: internet-facing
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet2"

      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebAppLoadBalancer"

  # A Listener that listens on port 80 and forwards to the WebAppTargetGroup
  WebAppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  # A ALB Listener Rule that listens on port 80 and forwards to the WebAppTargetGroup
  WebAppListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/*]
      ListenerArn: !Ref WebAppListener
      Priority: 1

Outputs:
  WebAppLoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt WebAppLoadBalancer.DNSName
    Export:
      Name: !Sub "${EnvironmentName}-WebAppLoadBalancerDNS"

  WebAppLoadBalancer:
    Description: Load balancer
    Value: !Ref WebAppLoadBalancer
    Export:
      Name: !Sub "${EnvironmentName}-WebAppLoadBalancer"

  WebAppTargetGroup:
    Description: Target group
    Value: !Ref WebAppTargetGroup
    Export:
      Name: !Sub "${EnvironmentName}-WebAppTargetGroup"

  WebAppAutoScalingGroup:
    Description: Auto scaling group
    Value: !Ref WebAppAutoScalingGroup
    Export:
      Name: !Sub "${EnvironmentName}-WebAppAutoScalingGroup"
